package application.beans; /***********************************************************************
 * Module:  application.beans.SystemeExploitation.java
 * Author:  RENAUD + BORIS
 * Purpose: Defines the Class application.beans.SystemeExploitation
 ***********************************************************************/

import application.interfaces.IComposant;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;

import javax.validation.constraints.NotNull;

/**
 * @pdOid a633fd2d-b7d0-4937-877e-de6af513bc90
 */
public class SystemeExploitation extends Composant implements IComposant {

    @NotNull
    private String format;

    @NotNull
    private int architecture;

    private StringProperty formatSP;
    private StringProperty architectureSP;


    public String getFormat() {
        return format;
    }

    public void setFormat(String type) {
        this.format = type;
        this.setFormatSP(format);
    }

    public String getFormatSP() {
        return formatSP.get();
    }

    public StringProperty formatSPProperty() {
        return formatSP;
    }

    public void setFormatSP(String formatSP) {
        this.formatSP.set(format);
    }

    public int getArchitecture() {
        return architecture;
    }

    public void setArchitecture(int architecture) {
        this.architecture = architecture;
        this.setArchitectureSP(String.valueOf(architecture));
    }

    public String getArchitectureSP() {
        return architectureSP.get();
    }

    public StringProperty architectureSPProperty() {
        return architectureSP;
    }

    public void setArchitectureSP(String architectureSP) {
        this.architectureSP.set(String.valueOf(architecture));
    }

    public SystemeExploitation() {
        super();
    }


    public SystemeExploitation(int id, String reference, String constructeur, String libelle, String details, int idMachine, String type, String format, int architecture) {
        super(id, reference, constructeur, libelle, details, idMachine, type);
        this.format = format;
        this.architecture = architecture;
        remplirSP();
    }

    public void remplirSP() {
        // CONVERSION EN TYPE D'OBJETS OBSERVABLES
        this.idSP = new SimpleStringProperty(String.valueOf(this.getId()));
        this.referenceSP = new SimpleStringProperty(this.getReference());
        this.constructeurSP = new SimpleStringProperty(this.getConstructeur());
        this.libelleSP = new SimpleStringProperty(this.getLibelle());
        this.detailsSP = new SimpleStringProperty((this.getDetails()));
        this.idMachineSP = new SimpleStringProperty(String.valueOf(this.getIdMachine()));
        this.typeSP = new SimpleStringProperty(this.getType());
        this.formatSP = new SimpleStringProperty(this.getFormat());
        this.architectureSP = new SimpleStringProperty(String.valueOf(this.getArchitecture()));
    }
}